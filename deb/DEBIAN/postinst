#!/bin/sh
# postinst script for kafka

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


# def kafka
_name=kafka
_kafka_user=${_name}
_kafka_group=${_name}

case "$1" in
    configure)
        if [ -d /run/systemd/system ]; then
            systemctl --system daemon-reload >/dev/null || true
            if [ -n "$2" ]; then
                _dh_action=restart
            else
                _dh_action=start
            fi
            deb-systemd-invoke $_dh_action 'kafka.service' >/dev/null || true
        fi

        # create the user as defined in /usr/lib/sysusers.d/kafka.conf
        systemd-sysusers

        # log
        chown -Rh ${_kafka_user}:${_kafka_group} /var/log/kafka/
        chmod 0755 /var/log/kafka/

        # data
        chown -Rh ${_kafka_user}:${_kafka_group} /var/lib/kafka/
        chmod 0755 /var/lib/kafka/

        # run
        chown -Rh ${_kafka_user}:${_kafka_group} /run/kafka/
        chmod 0755 /run/kafka/
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        if [ -d /run/systemd/system ]; then
            systemctl --system daemon-reload >/dev/null || true
            if [ -n "$2" ]; then
                _dh_action=restart
            else
                _dh_action=start
            fi
            deb-systemd-invoke $_dh_action 'kafka.service' >/dev/null || true
        fi
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
